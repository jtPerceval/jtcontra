// jtmx5k_game_sdram.v is automatically generated by JTFRAME
// Do not modify it
// Do not add it to git

`ifndef JTFRAME_COLORW
`define JTFRAME_COLORW 4
`endif

`ifndef JTFRAME_BUTTONS
`define JTFRAME_BUTTONS 2
`endif

module jtmx5k_game_sdram(
    input           rst,
    input           clk,
`ifdef JTFRAME_CLK24
    input           rst24,
    input           clk24,
`endif
`ifdef JTFRAME_CLK48
    input           rst48,
    input           clk48,
`endif
    output          pxl2_cen,   // 12   MHz
    output          pxl_cen,    //  6   MHz
    output   [`JTFRAME_COLORW-1:0]  red,
    output   [`JTFRAME_COLORW-1:0]  green,
    output   [`JTFRAME_COLORW-1:0]  blue,
    output          LHBL,
    output          LVBL,
    output          HS,
    output          VS,
    // cabinet I/O
`ifdef JTFRAME_4PLAYERS
    input    [ 3:0] start_button,
    input    [ 3:0] coin_input,
    input    [`JTFRAME_BUTTONS-1+4:0] joystick1,
    input    [`JTFRAME_BUTTONS-1+4:0] joystick2,
    input    [`JTFRAME_BUTTONS-1+4:0] joystick3,
    input    [`JTFRAME_BUTTONS-1+4:0] joystick4,
`else
    input    [ 1:0] start_button,
    input    [ 1:0] coin_input,
    input    [`JTFRAME_BUTTONS-1+4:0] joystick1,
    input    [`JTFRAME_BUTTONS-1+4:0] joystick2,
`endif
`ifdef JTFRAME_ANALOG
    input   [15:0]  joyana_l1,
    input   [15:0]  joyana_l2,
    `ifdef JTFRAME_ANALOG_DUAL
    input   [15:0]  joyana_r1,
    input   [15:0]  joyana_r2,
    `endif
    `ifdef JTFRAME_4PLAYERS
    input   [15:0]  joyana_l3,
    input   [15:0]  joyana_l4,
        `ifdef JTFRAME_ANALOG_DUAL
    input   [15:0]  joyana_r3,
    input   [15:0]  joyana_r4,
        `endif
    `endif
`endif
    // SDRAM interface
    input           downloading,
    output          dwnld_busy,
`ifdef JTFRAME_IOCTL_RD
    input           ioctl_ram,
    output   [ 7:0] ioctl_din,
`endif
    // Bank 0: allows R/W
    output   [21:0] ba0_addr,
    output   [21:0] ba1_addr,
    output   [21:0] ba2_addr,
    output   [21:0] ba3_addr,
    output   [ 3:0] ba_rd,
    // Write signals
    output   [ 3:0] ba_wr,
    output   [15:0] ba0_din,
    output   [ 1:0] ba0_dsn,  // write mask
    output   [15:0] ba1_din,
    output   [ 1:0] ba1_dsn,
    output   [15:0] ba2_din,
    output   [ 1:0] ba2_dsn,
    output   [15:0] ba3_din,
    output   [ 1:0] ba3_dsn,

    input    [ 3:0] ba_ack,
    input    [ 3:0] ba_dst,
    input    [ 3:0] ba_dok,
    input    [ 3:0] ba_rdy,

    input    [15:0] data_read,
    // ROM LOAD
    input   [24:0]  ioctl_addr,
    input   [ 7:0]  ioctl_dout,
    input           ioctl_wr,
    output  [21:0]  prog_addr,
    output  [15:0]  prog_data,
    output  [ 1:0]  prog_mask,
    output  [ 1:0]  prog_ba,
    output          prog_we,
    output          prog_rd,
    input           prog_ack,
    input           prog_dok,
    input           prog_dst,
    input           prog_rdy,
    // DIP switches
    input   [31:0]  status,     // only bits 31:16 are looked at
    input   [31:0]  dipsw,
    input           service,
    input           dip_pause,
    inout           dip_flip,
    input           dip_test,
    input   [ 1:0]  dip_fxlevel,
    // Sound output
`ifdef JTFRAME_STEREO
    output  signed [15:0] snd_left,
    output  signed [15:0] snd_right,
`else
    output  signed [15:0] snd,
`endif
    output          sample,
    output          game_led,
    input           enable_psg,
    input           enable_fm,
    // Debug
`ifdef JTFRAME_DEBUG
    input   [ 7:0]  debug_bus,
    output  [ 7:0]  debug_view,
`endif
`ifdef JTFRAME_STATUS
    input   [ 7:0]  st_addr,
    output  [ 7:0]  st_dout,
`endif
    input   [ 3:0]  gfx_en
);

/* verilator lint_off WIDTH */
`ifdef JTFRAME_BA1_START
    localparam [24:0] BA1_START=`JTFRAME_BA1_START;
`endif
`ifdef JTFRAME_BA2_START
    localparam [24:0] BA2_START=`JTFRAME_BA2_START;
`endif
`ifdef JTFRAME_BA3_START
    localparam [24:0] BA3_START=`JTFRAME_BA3_START;
`endif
`ifdef JTFRAME_PROM_START
    localparam [24:0] PROM_START=`JTFRAME_PROM_START;
`endif
/* verilator lint_on WIDTH */


parameter SND_OFFSET = `SND_START >> 1;
parameter GFX1_OFFSET = `GFX_START >> 1;
parameter PCM_OFFSET = `PCM_START >> 1;

`ifndef JTFRAME_IOCTL_RD
wire ioctl_ram = 0;
`endif



wire [14:0] snd_addr;
wire [ 7:0] snd_data;
wire        snd_cs, snd_ok;
wire [18:1] gfx1_addr;
wire [15:0] gfx1_data;
wire        gfx1_cs, gfx1_ok;
wire [17:0] pcma_addr;
wire [ 7:0] pcma_data;
wire        pcma_cs, pcma_ok;
wire [17:0] pcmb_addr;
wire [ 7:0] pcmb_data;
wire        pcmb_cs, pcmb_ok;
wire [17:0] main_addr;
wire [ 7:0] main_data;
wire        main_cs, main_ok;
wire        prom_we, header;
wire [21:0] raw_addr, post_addr;
wire [24:0] pre_addr, dwnld_addr;
wire [ 7:0] post_data;
wire [15:0] raw_data;

jtmx5k_game u_game(
    .rst        ( rst       ),
    .clk        ( clk       ),
`ifdef JTFRAME_CLK24
    .rst24      ( rst24     ),
    .clk24      ( clk24     ),
`endif
`ifdef JTFRAME_CLK48
    .rst48      ( rst48     ),
    .clk48      ( clk48     ),
`endif
    .pxl2_cen       ( pxl2_cen      ),
    .pxl_cen        ( pxl_cen       ),
    .red            ( red           ),
    .green          ( green         ),
    .blue           ( blue          ),
    .LHBL           ( LHBL          ),
    .LVBL           ( LVBL          ),
    .HS             ( HS            ),
    .VS             ( VS            ),
    // cabinet I/O
    .start_button   ( start_button  ),
    .coin_input     ( coin_input    ),
    .joystick1      ( joystick1     ),
    .joystick2      ( joystick2     ),
    `ifdef JTFRAME_4PLAYERS
    .joystick3      ( joystick3     ),
    .joystick4      ( joystick4     ),
    `endif
`ifdef JTFRAME_ANALOG
    .joyana_l1    ( joyana_l1        ),
    .joyana_l2    ( joyana_l2        ),
    `ifdef JTFRAME_ANALOG_DUAL
        .joyana_r1    ( joyana_r1        ),
        .joyana_r2    ( joyana_r2        ),
    `endif
    `ifdef JTFRAME_4PLAYERS
        .joyana_l3( joyana_l3        ),
        .joyana_l4( joyana_l4        ),
        `ifdef JTFRAME_ANALOG_DUAL
            .joyana_r3( joyana_r3        ),
            .joyana_r4( joyana_r4        ),
        `endif
    `endif
`endif
    // DIP switches
    .status         ( status        ),
    .dipsw          ( dipsw         ),
    .service        ( service       ),
    .dip_pause      ( dip_pause     ),
    .dip_flip       ( dip_flip      ),
    .dip_test       ( dip_test      ),
    .dip_fxlevel    ( dip_fxlevel   ),
    // Sound output
`ifdef JTFRAME_STEREO
    .snd_left       ( snd_left      ),
    .snd_right      ( snd_right     ),
`else
    .snd            ( snd           ),
`endif
    .sample         ( sample        ),
    .game_led       ( game_led      ),
    .enable_psg     ( enable_psg    ),
    .enable_fm      ( enable_fm     ),
    // Memory interface
    .snd_addr ( snd_addr ),
    .snd_cs   ( snd_cs   ),
    .snd_ok   ( snd_ok   ),
    .snd_data ( snd_data ),
    
    .gfx1_addr ( gfx1_addr ),
    .gfx1_cs   ( gfx1_cs   ),
    .gfx1_ok   ( gfx1_ok   ),
    .gfx1_data ( gfx1_data ),
    
    .pcma_addr ( pcma_addr ),
    .pcma_cs   ( pcma_cs   ),
    .pcma_ok   ( pcma_ok   ),
    .pcma_data ( pcma_data ),
    
    .pcmb_addr ( pcmb_addr ),
    .pcmb_cs   ( pcmb_cs   ),
    .pcmb_ok   ( pcmb_ok   ),
    .pcmb_data ( pcmb_data ),
    
    .main_addr ( main_addr ),
    .main_cs   ( main_cs   ),
    .main_ok   ( main_ok   ),
    .main_data ( main_data ),
    
    // PROM writting
    .ioctl_addr   ( ioctl_addr     ),
    .prog_addr    ( (header | ioctl_ram) ? ioctl_addr[21:0] : raw_addr      ),
    .prog_data    ( header ? ioctl_dout : raw_data[7:0] ),
    .prog_we      ( header ? ioctl_wr   : prog_we  ),
    .prog_ba      ( prog_ba        ), // prog_ba supplied in case it helps re-mapping addresses
`ifdef JTFRAME_PROM_START
    .prom_we      ( prom_we        ),
`endif
`ifdef JTFRAME_HEADER
    .header       ( header         ),
`endif
`ifdef JTFRAME_IOCTL_RD
    .ioctl_ram    ( ioctl_ram      ),
    .ioctl_din    ( ioctl_din      ),
`endif
    // Debug  
`ifdef JTFRAME_DEBUG
    .debug_bus    ( debug_bus      ),
    .debug_view   ( debug_view     ),
`endif
`ifdef JTFRAME_STATUS
    .st_addr      ( st_addr        ),
    .st_dout      ( st_dout        ),
`endif
    .gfx_en       ( gfx_en         )
);

assign dwnld_busy = downloading | prom_we; // prom_we is really just for sims
assign dwnld_addr = ioctl_addr;
assign prog_addr = raw_addr;
assign prog_data = raw_data;

jtframe_dwnld #(
`ifdef JTFRAME_HEADER
    .HEADER    ( `JTFRAME_HEADER   ),
`endif
`ifdef JTFRAME_BA1_START
    .BA1_START ( BA1_START ),
`endif
`ifdef JTFRAME_BA2_START
    .BA2_START ( BA2_START ),
`endif
`ifdef JTFRAME_BA3_START
    .BA3_START ( BA3_START ),
`endif
`ifdef JTFRAME_PROM_START
    .PROM_START( PROM_START ),
`endif
    .SWAB      ( 1         )
) u_dwnld(
    .clk          ( clk            ),
    .downloading  ( downloading & ~ioctl_ram    ),
    .ioctl_addr   ( dwnld_addr     ),
    .ioctl_dout   ( ioctl_dout     ),
    .ioctl_wr     ( ioctl_wr       ),
    .prog_addr    ( raw_addr       ),
    .prog_data    ( raw_data       ),
    .prog_mask    ( prog_mask      ), // active low
    .prog_we      ( prog_we        ),
    .prog_rd      ( prog_rd        ),
    .prog_ba      ( prog_ba        ),
    .prom_we      ( prom_we        ),
    .header       ( header         ),
    .sdram_ack    ( prog_ack       )
);


/* verilator tracing_off */
jtframe_rom_5slots #(
    // snd
    .SLOT0_OFFSET(SND_OFFSET[21:0]),
    .SLOT0_AW(15),
    .SLOT0_DW( 8), 
    // gfx1
    .SLOT1_OFFSET(GFX1_OFFSET[21:0]),
    .SLOT1_AW(18),
    .SLOT1_DW(16), 
    // pcma
    .SLOT2_OFFSET(PCM_OFFSET[21:0]),
    .SLOT2_AW(18),
    .SLOT2_DW( 8), 
    // pcmb
    .SLOT3_OFFSET(PCM_OFFSET[21:0]),
    .SLOT3_AW(18),
    .SLOT3_DW( 8), 
    // main
    .SLOT4_AW(18),
    .SLOT4_DW( 8)
`ifdef JTFRAME_BA2_LEN
    ,.SLOT0_DOUBLE(1)
    ,.SLOT1_DOUBLE(1)
    ,.SLOT2_DOUBLE(1)
    ,.SLOT3_DOUBLE(1)
    ,.SLOT4_DOUBLE(1)
`endif
) u_bank0(
    .rst         ( rst        ),
    .clk         ( clk        ),
    
    .slot0_addr  ( snd_addr  ),
    .slot0_dout  ( snd_data  ),
    .slot0_cs    ( snd_cs    ),
    .slot0_ok    ( snd_ok    ),
    
    .slot1_addr  ( gfx1_addr  ),
    .slot1_dout  ( gfx1_data  ),
    .slot1_cs    ( gfx1_cs    ),
    .slot1_ok    ( gfx1_ok    ),
    
    .slot2_addr  ( pcma_addr  ),
    .slot2_dout  ( pcma_data  ),
    .slot2_cs    ( pcma_cs    ),
    .slot2_ok    ( pcma_ok    ),
    
    .slot3_addr  ( pcmb_addr  ),
    .slot3_dout  ( pcmb_data  ),
    .slot3_cs    ( pcmb_cs    ),
    .slot3_ok    ( pcmb_ok    ),
    
    .slot4_addr  ( main_addr  ),
    .slot4_dout  ( main_data  ),
    .slot4_cs    ( main_cs    ),
    .slot4_ok    ( main_ok    ),
    
    // SDRAM controller interface
    .sdram_ack   ( ba_ack[0]  ),
    .sdram_rd    ( ba_rd[0]   ),
    .sdram_addr  ( ba0_addr   ),
    .data_dst    ( ba_dst[0]  ),
    .data_rdy    ( ba_rdy[0]  ),
    .data_read   ( data_read  )
);
assign ba_wr[0] = 0;
assign ba0_din  = 0;
assign ba0_dsn  = 3;

assign ba1_addr = 0;
assign ba_rd[1] = 0;
assign ba_wr[1] = 0;
assign ba1_dsn  = 3;
assign ba1_din  = 0;
assign ba2_addr = 0;
assign ba_rd[2] = 0;
assign ba_wr[2] = 0;
assign ba2_dsn  = 3;
assign ba2_din  = 0;
assign ba3_addr = 0;
assign ba_rd[3] = 0;
assign ba_wr[3] = 0;
assign ba3_dsn  = 3;
assign ba3_din  = 0;
endmodule
